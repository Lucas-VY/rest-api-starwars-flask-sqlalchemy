from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

### user uno a muchos (characters, vehicles y planets FAVS)
class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    usernamename = db.Column(db.String(100), nullable=False, unique=True)
    password = db.Column(db.String(100), nullable=False, unique=False )
    email = db.Column(db.String(100), nullable=False, unique=True)

    ## RELACION CON LA TABLA PIVOTTE DE UN(USER) A MUCHOS(FAV)
    fav_characters = db.relationship('Favorite_Characters', cascade="all, delete", backref="user")
    fav_planets = db.relationship('Favorite_Planets', cascade="all, delete", backref="user")
    fav_vehicles = db.relationship('Favorite_Vehicles', cascade="all, delete", backref="user")
    
    ## metodo para guardar en base de dato
    def save(self):
        db.session.add(self)
        db.session.commit()
    #update base de dato de user
    def update(self):
        db.session.commit()
    #delete en base de dato
    def delete(self):
        db.session.delete(self)
        db.session.commit()

    #se encarga de devolver mi objeto de python en un obj serializable
    def serialize(self):
        return {
            "id": self.id,
            "username": self.username,
            "email": self.email,
            "favorite_characters": {
                "user_to_fav_characters": self.user_to_fav_characters(),
                "characters_id_to_fav": self.characters_id_to_fav
            },
            "favorite_planets": {
                "user_to_fav_planets": self.user_to_fav_planets,
                "planets_id_to_fav": self.planets_id_to_fav
            },
            "favorite_vehicles": {
                "user_to_fav_planets": self.user_to_fav_planets,
                "planets_id_to_fav": self.planets_id_to_fav
            }
        }

    ## CONEXION A FAVORITOS CHARACTERS 
    def serialize_user_with_favorite_characters(self):
        return {
            "id": self.id,
            "username": self.username,
            "email": self.email,
            "password": self.password,
            "favorite_characters": self.get_fav_characters()
        }

    def get_fav_characters(self):
        return list(map(lambda  fav_character:  fav_character.serialize(), self.fav_characters))

    def favorite_character_by_user(self):
        return len(self.favorite_characters)

# UN USUARIO A MUCHOS FAVORITE CHARACTERS
########


## MUCHOS
# TABLA PIVOTTE
class Favorite_Characters(db.Model):
    __tablename__ = 'favorite_characters'
    user_to_fav_characters = db.Column(db.Integer, primary_key=True, nullable=False)
    characters_id_to_fav = db.Column(db.Integer, primary_key=True, nullable=False)

    #conexion con user \--< favorite_characters
    user_id = db.Column(db.Integer, db.ForeignKey(
        'users.id', ondelete='CASCADE'), nullable=False
    )

    character_id = db.Column(db.Integer, db.ForeignKey('characters.id', ondelete='CASCADE'), nullable=False) 

    def save(self):
        db.session.add(self)
        db.session.commit()

    def update(self):
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def serialize(self):
        return {
            "user_to_fav_characters": self.user_to_fav_characters,
            "characters_id_to_fav": self.characters_id_to_fav,
        }




            # MUCHOS A MUCHOS CARACTERES
########


# MUCHOS CHARACTERS
class Characters(db.Model):
    __tablename__ = 'characters'
    id = db.Column(db.Integer, primary_key=True) 
    name = db.Column(db.String(250), nullable=False)
    gender = db.Column(db.String(250), nullable=False)
    height = db.Column(db.String(250), nullable=False)
    mass = db.Column(db.String(100), nullable=False)
    hair_color = db.Column(db.String(250), nullable=False)
    skin_color = db.Column(db.String(100), nullable=False)
    eye_color = db.Column(db.String(100), nullable=False)
    birth_year = db.Column(db.String(100), nullable=False)
    created = db.Column(db.String(100), nullable=False)
    edited = db.Column(db.String(100), nullable=False)
    homeworld = db.Column(db.String(100), nullable=False)
    url = db.Column(db.String(100), nullable=False)

    link_with_fav_character = db.relationship('users.id', secondary='')

    def save(self):
        db.session.add(self)
        db.session.commit()

    def update(self):
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def serialize(self):
        return {
            "id": self.id,
            "name": self.name,
            "gender": self.gender,
            "height": self.height,
            "mass": self.mass,
            "hair_color": self.hair_color,
            "skin_color": self.skin_color,
            "eye_color": self.eye_color,
            "birth_year": self.birth_year,
            "created": self.created,
            "edited": self.edited,
            "homeworld": self.homeworld,
            "url": self.url,
        }
#########


class Favorite_Planets(db.Model):
    __tablename__ = 'favorite_planets'
    user_to_fav_planets = db.Column(db.Integer, primary_key=True)
    planets_id_to_fav = db.Column(db.Integer, db.ForeignKey("planets.id", ondelete='CASCADE'), nullable=False)
    
    #conexion con user
    user_id = db.Column(db.Integer, db.ForeignKey(
        'users.id', ondelete='CASCADE'), nullable=False
    )

    def save(self):
        db.session.add(self)
        db.session.commit()

    def update(self):
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def serialize(self):
        return {
            "user_to_fav_planets": self.user_to_fav_planets,
            "planets_id_to_fav": self.planets_id_to_fav,
        }

########


class Planets(db.Model):
    __tablename__ = 'planets'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(250), nullable=False)
    diameter = db.Column(db.String(250), nullable=False)
    rotation_period = db.Column(db.String(100), nullable=False)
    orbital_period = db.Column(db.String(100), nullable=False)
    gravity = db.Column(db.String(100), nullable=False)
    population = db.Column(db.String(250), nullable=False)
    climate = db.Column(db.String(250), nullable=False)
    terrain = db.Column(db.String(250), nullable=False)
    surface_water = db.Column(db.String(100), nullable=False)
    created = db.Column(db.String(100), nullable=False)
    edited = db.Column(db.String(100), nullable=False)
    url = db.Column(db.String(100), nullable=False)


    def save(self):
        db.session.add(self)
        db.session.commit()

    def update(self):
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def serialize(self):
        return {
            "id": self.id,
            "name": self.name,
            "diameter": self.diameter,
            "rotation_period": self.rotation_period,
            "orbital_period": self.orbital_period,
            "gravity": self.gravity,
            "population": self.population,
            "climate": self.climate,
            "terrain": self.terrain,
            "surface_water": self.surface_water,
            "created": self.created,
            "edited": self.edited,
            "url": self.url,
        }
#########


class Favorite_Vehicles(db.Model):
    __tablename__ = 'favorite_vehicles'
    user_to_fav_vehicles = db.Column(db.Integer, primary_key=True)
    vehicles_id_to_fav = db.Column(db.Integer, db.ForeignKey("vehicles.id", ondelete='CASCADE'), nullable=False)

    #conexion con user
    user_id = db.Column(db.Integer, db.ForeignKey(
        'users.id', ondelete='CASCADE'), nullable=False
    )

    def save(self):
        db.session.add(self)
        db.session.commit()

    def update(self):
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def to_dict(self):
        return {
            "user_to_fav_vehicles": self.user_to_fav_vehicles,
            "vehicles_id_to_fav": self.vehicles_id_to_fav,
        }
########



class Vehicles(db.Model):
    __tablename__ = 'vehicles'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(250), nullable=False)
    model = db.Column(db.String(250), nullable=False)
    starship_class = db.Column(db.String(250), nullable=False)
    manufacturer = db.Column(db.String(250), nullable=False)
    cost_in_credits = db.Column(db.String(250), nullable=False)
    length = db.Column(db.String(250), nullable=False)
    passengers = db.Column(db.String(250), nullable=False)
    max_armosphering_speed = db.Column(db.String(250), nullable=False)
    hyperdrive_rating = db.Column(db.String(250), nullable=False)
    cargo_capacity = db.Column(db.String(250), nullable=False)
    consumables = db.Column(db.String(250), nullable=False)
    pilots = db.Column(db.String(250), nullable=False)
    created = db.Column(db.String(250), nullable=False)
    edited = db.Column(db.String(250), nullable=False)
    url = db.Column(db.String(250), nullable=False)

    def save(self):
        db.session.add(self)
        db.session.commit()

    def update(self):
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def serialize(self):
        return {
            "id": self.id,
            "name": self.name,
            "model": self.model,
            "starship_class": self.starship_class,
            "manufacturer": self.manufacturer,
            "cost_in_credits": self.cost_in_credits,
            "length": self.length,
            "passengers": self.passengers,
            "max_armosphering_speed": self.max_armosphering_speed,
            "hyperdrive_rating": self.hyperdrive_rating,
            "cargo_capacity": self.cargo_capacity,
            "consumables": self.consumables,
            "pilots": self.pilots,
            "created": self.created,
            "edited": self.edited,
            "url": self.url,
        }